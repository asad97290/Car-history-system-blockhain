{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nvar url = \"http://localhost:4000/channels/mychannel/chaincodes/fabcar?fcn=queryAllCars\";\nvar pk = null;\nvar token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDQyNTE5MTAsInVzZXJuYW1lIjoic2hhIiwib3JnTmFtZSI6Ik9yZzEiLCJpYXQiOjE2MDQyMTU5MTB9.M7mM-L1f_1aHtm2AUxCOE22MYcVlr1tR0sRSXI7ISn0\";\nvar conf = {\n  headers: {\n    Authorization: \"Bearer \".concat(token),\n    \"Content-Type\": \"application/json\"\n  }\n}; // const createPostData = async (pk, data) => {\n// \treturn {\n// \t\tfcn: \"CreateSampleData\",\n// \t\tpeers: [\"peer0.org1.example.com\", \"peer0.org2.example.com\"],\n// \t\tchaincodeName: \"test_cc\",\n// \t\tchannelName: \"mychannel\",\n// \t\targs: [JSON.stringify(data), pk]\n// \t}\n// }\n// const postFarmerData = async (pk) => {\n// \tconsole.log(pk)\n// \tlet data = {\n// \t\tcreated_at: (new Date).getTime(),\n// \t\tname: 'Ramlal Oberoi',\n// \t\tweight: 1000\n// \t}\n// \tlet postData = await createPostData(pk.toString(), data)\n// \t// console.log(\"before AXIOS call\", postData)\n// \treturn axios.post(url, postData, conf\n// \t).then(function (response) { console.log(`${pk.toString()} => `, response.data); }\n// \t).catch(function (error) { console.log(error); });\n// };\n\nexport default /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return axios.get(url, conf);\n\n        case 3:\n          data = _context.sent;\n          console.log(data);\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          throw _context.t0;\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, null, [[0, 7]]);\n}));","map":{"version":3,"sources":["/home/asadullah/BasicNetwork-2.0/client/pages/index.js"],"names":["axios","url","pk","token","conf","headers","Authorization","get","data","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,GAAG,GAAG,6EAAZ;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAMC,KAAK,GAAG,+KAAd;AACA,IAAIC,IAAI,GAAG;AACVC,EAAAA,OAAO,EAAE;AACRC,IAAAA,aAAa,mBAAYH,KAAZ,CADL;AAER,oBAAgB;AAFR;AADC,CAAX,C,CAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,qFAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEQH,KAAK,CAACO,GAAN,CAAUN,GAAV,EAAcG,IAAd,CAFR;;AAAA;AAELI,UAAAA,IAFK;AAGXC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAHW;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import axios from 'axios'\n\nconst url = \"http://localhost:4000/channels/mychannel/chaincodes/fabcar?fcn=queryAllCars\";\nlet pk = null;\nconst token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDQyNTE5MTAsInVzZXJuYW1lIjoic2hhIiwib3JnTmFtZSI6Ik9yZzEiLCJpYXQiOjE2MDQyMTU5MTB9.M7mM-L1f_1aHtm2AUxCOE22MYcVlr1tR0sRSXI7ISn0\"\nlet conf = {\n\theaders: {\n\t\tAuthorization: `Bearer ${token}`,\n\t\t\"Content-Type\": \"application/json\"\n\t}\n};\n\n\n// const createPostData = async (pk, data) => {\n\t\n// \treturn {\n// \t\tfcn: \"CreateSampleData\",\n// \t\tpeers: [\"peer0.org1.example.com\", \"peer0.org2.example.com\"],\n// \t\tchaincodeName: \"test_cc\",\n// \t\tchannelName: \"mychannel\",\n// \t\targs: [JSON.stringify(data), pk]\n// \t}\n// }\n// const postFarmerData = async (pk) => {\n// \tconsole.log(pk)\n// \tlet data = {\n// \t\tcreated_at: (new Date).getTime(),\n// \t\tname: 'Ramlal Oberoi',\n// \t\tweight: 1000\n// \t}\n// \tlet postData = await createPostData(pk.toString(), data)\n// \t// console.log(\"before AXIOS call\", postData)\n\n// \treturn axios.post(url, postData, conf\n// \t).then(function (response) { console.log(`${pk.toString()} => `, response.data); }\n// \t).catch(function (error) { console.log(error); });\n\n// };\n\nexport default async () =>{\n    try{\n    const data = await axios.get(url,conf)\n    console.log(data)\n    }catch(err){\n        throw err;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}